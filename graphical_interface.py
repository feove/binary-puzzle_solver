import os
from math import *
from time import sleep
from pynput.keyboard import Key, Listener 

press_string = "               ┌───┐             ┌───┐\n         Press │ s │ to start or │ q │ to quit\n               └───┘             └───┘\n\n\n\n\n"
                                                                            
def print_start():
    print("\n\n\n\n                 ┏━━━━━━━━━━━━━━━┓\n                 ┃     START     ┃\n                 ┗━━━━━━━━━━━━━━━┛\n\n\n\n\n")

def cursor_show():
    print('\033[? 25h', end="")

def cursor_hide():
    print('\033[? 25l', end="")

def intro():

    os.system('clear')
    loader = ">"
    
    print(loader)
    print_start()
    print(press_string)
    print(loader)
    
    sleep(0.1)
    
    for t in range(1,55):

        os.system('clear')
        
        char = "━"
        if (t % 2 == 0):
            char = "="
        
        loader += char
       
        print(loader[::-1])
        print_start()
        print(press_string)
        print(loader[::-1])

        sleep(0.1)

    os.system('clear')
    print("<"+loader[::-1])
    print_start()
    print(press_string)
    print("<"+loader[::-1])
    
    
    
   
grid_list = ["6x6","10x10","12X12"]

grid_list_size = len(grid_list)

current_grid = 0

dimensions_string = "\n  "

def display_menu():

    os.system("clear")
    print("Choose the grid dimension:")

    
def display_grid_lists(current_grid,select:bool):

    
    current_grid_copy = grid_list[current_grid]
    global dimensions_string

    if select:
        dimensions_string = "\n  "
        for i in range(grid_list_size):

            if i == current_grid:
                grid_list[i] = "|" + grid_list[i] + "|"
        
            dimensions_string +=  grid_list[i]  +  "  "

    print(dimensions_string)
    grid_list[current_grid] = current_grid_copy

def grid_dimension():

    display_menu()
    display_grid_lists(current_grid,True)

    def on_press(key):

        global current_grid
        try:
            if key == Key.left:
                
                if current_grid != 0:
                    current_grid = current_grid-1
                display_menu()
                display_grid_lists(current_grid,True)

           
            elif key == Key.right:
                
                if current_grid != grid_list_size-1:
                    current_grid += 1
                display_menu()
                display_grid_lists(current_grid,True)
               
            
            elif key == Key.enter:
                return False
           
            elif key.char == 'q':

                current_grid = -1
                return False
            
            else:
                display_menu()
                display_grid_lists(current_grid,False)

            
        except AttributeError:
            
            pass
            
    with Listener(on_press = on_press) as listener:
        listener.join()

    return current_grid


grid_6x6 = [
    ['┌','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┐'],
    ['│',' ','0',' ','│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ','0',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ','1',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ','0',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ','1',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['└','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┘']
]

grid_10x10 = [
    ['┌','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┐'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','X',' ','│'],
    ['└','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┘'],
]

grid_12x12 = [
    ['┌','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┐'],
    ['│',' ','0',' ','│',' ','1',' ','│',' ','2',' ','│',' ','3',' ','│',' ','4',' ','│',' ','5',' ','│',' ','6',' ','│',' ','7',' ','│',' ','8',' ','│',' ','9',' ','│',' ','0',' ','│',' ','1',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','2',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','3',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','4',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','5',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','6',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','7',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','8',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ','O',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','9',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','0',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','1',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ','2',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['└','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┘']
]


grids = [grid_6x6,grid_10x10,grid_12x12]

i = 14
i_prev = 2
i_next = 6
j = 5
j_next = 7
j_prev = 3

def clear_colum(num_grid):

    l = 1
    end = [5,9,11][num_grid]
    while((l-1)//2 <= end):
        
        grids[num_grid][l][i] = ' '   
        l += 2

def clear_line(num_grid):

    c = 2
    end = [5,9,11][num_grid]
    while((c-2)//4 <= end):
        
        grids[num_grid][j][c] = ' '   
        c += 4
        
def clear_grid(num_grid):
    
    for row in range(1, len(grids[num_grid]) - 1, 2): 
       
        for col_index in range(2, len(grids[num_grid][row]) - 2, 4):  
            grids[num_grid][row][col_index] = ' ' 

def example_set():

    print("In developping ...")
    sleep(2)
    return

def display_grid(num_grid):
    os.system("clear")

    print(grids[num_grid][j][i])

    grids[num_grid][j][i_next-1] = ' ' 
    grids[num_grid][j][i_next+1] = ' '
    grids[num_grid][j][i_prev-1] = ' '
    grids[num_grid][j][i_prev+1] = ' ' 

    grids[num_grid][j_prev][i-1] = ' ' 
    grids[num_grid][j_prev][i+1] = ' '   
    grids[num_grid][j_next][i-1] = ' ' 
    grids[num_grid][j_next][i+1] = ' '   
    
    grids[num_grid][j][i-1] = '▸' 
    grids[num_grid][j][i+1] = '◂'

    for row in grids[num_grid]:
        print("".join(row))
    
    print("\n  Press 'x' to place '1'                         Press 'e' to set and example\n  Press 'c' to place '0'\n  Press 'v' to delete\n  Press 'b' to clear the line\n  Press 'g' to clear the colum\n  Press 'j' to clear the grid")
    return

def grid_filling(num_grid):

    display_grid(num_grid)

    def arrow_press(key):

        global i
        global i_prev
        global i_next

        global j
        global j_prev
        global j_next

        try:
            if key == Key.left:
                
                i_next = i
                if i != 2:
                    i -= 4
                
            elif key == Key.right:
                
                i_prev = i
                if (i-2)//4 != ([5,9,11][num_grid]):
                    i += 4

            elif key == Key.up:
                
                j_prev = j
                if j != 1:
                    j -= 2

            elif key == Key.down:

                j_next = j
                if (j-1)//2 != ([5,9,11][num_grid]):
                    j += 2
              

            elif key == Key.enter:
                return False

            elif key.char == '1' or key.char == 'x':

                grids[num_grid][j][i] = '1'

            elif key.char == '0' or key.char == 'c':
                grids[num_grid][j][i] = '0'
            
            elif key.char == '2' or key.char == 'v':
                grids[num_grid][j][i] = ' '
            
            elif key.char == 'b':
                clear_line(num_grid)
            
            elif key.char == 'g':
                clear_colum(num_grid)

            elif key.char == 'j':
                clear_grid(num_grid)

            elif key.char == 'e':
                example_set()

            display_grid(num_grid)
            
        except AttributeError:
            
            pass
            
    with Listener(on_press = arrow_press) as listener:
        listener.join()

    return num_grid