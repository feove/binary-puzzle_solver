import os
from math import *
import solver
from time import sleep
from pynput.keyboard import Key, Listener 

press_string = "               ┌───┐             ┌───┐\n         Press │ s │ to start or │ q │ to quit\n               └───┘             └───┘\n\n\n\n\n"
                                                                            
def print_start():
    print("\n\n\n\n                 ┏━━━━━━━━━━━━━━━┓\n                 ┃     START     ┃\n                 ┗━━━━━━━━━━━━━━━┛\n\n\n\n\n")

def cursor_show():
    print('\033[? 25h', end="")

def cursor_hide():
    print('\033[? 25l', end="")

def intro():

    os.system('clear')
    loader = ">"
    
    print(loader)
    print_start()
    print(press_string)
    print(loader)
    
    sleep(0.1)
    
    for t in range(1,55):

        os.system('clear')
        
        char = "━"
        if (t % 2 == 0):
            char = "="
        
        loader += char
       
        print(loader[::-1])
        print_start()
        print(press_string)
        print(loader[::-1])

        sleep(0.1)

    os.system('clear')
    print("<"+loader[::-1])
    print_start()
    print(press_string)
    print("<"+loader[::-1])
    
    
    
   
grid_list = ["6x6","10x10","12X12"]

grid_list_size = len(grid_list)

current_grid = 0

dimensions_string = "\n  "

def display_menu():

    os.system("clear")
    print("Choose the grid dimension:")

    
def display_grid_lists(current_grid,select:bool):

    
    current_grid_copy = grid_list[current_grid]
    global dimensions_string

    if select:
        dimensions_string = "\n  "
        for i in range(grid_list_size):

            if i == current_grid:
                grid_list[i] = "|" + grid_list[i] + "|"
        
            dimensions_string +=  grid_list[i]  +  "  "

    print(dimensions_string)
    grid_list[current_grid] = current_grid_copy

def grid_dimension():

    display_menu()
    display_grid_lists(current_grid,True)

    def on_press(key):

        global current_grid
        try:
            if key == Key.left:
                
                if current_grid != 0:
                    current_grid = current_grid-1
                display_menu()
                display_grid_lists(current_grid,True)

           
            elif key == Key.right:
                
                if current_grid != grid_list_size-1:
                    current_grid += 1
                display_menu()
                display_grid_lists(current_grid,True)
               
            
            elif key == Key.enter:
                return False
           
            elif key.char == 'q':

                current_grid = -1
                return False
            
            else:
                display_menu()
                display_grid_lists(current_grid,False)

            
        except AttributeError:
            
            pass
            
    with Listener(on_press = on_press) as listener:
        listener.join()

    return current_grid


grid_6x6 = [
    ['┌','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┐'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['└','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┘']
]

grid_10x10 = [
    ['┌','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┐'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','│'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['└','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┘'],
]

grid_12x12 = [
    ['┌','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┬','─','─','─','┐'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['├','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┼','─','─','─','┤'],
    ['│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│',' ',' ',' ','│'],
    ['└','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┴','─','─','─','┘']
]


grids = [grid_6x6,grid_10x10,grid_12x12]

grid_size = [5,9,11]

i = 14
i_prev = 2
i_next = 6
j = 5
j_next = 7
j_prev = 3



def init_matrix(size):

    return [[3 for _ in range(size)] for _ in range(size)]

def grid_reading(num_grid):

    M = init_matrix(grid_size[num_grid]+1)

    i = 0
    j = 0

    for row in range(1, len(grids[num_grid]) - 1, 2): 
        
        j = 0
        for col in range(2, len(grids[num_grid][row]) - 2, 4):  
            
            digit = grids[num_grid][row][col]
            if digit != ' ':
            
                M[i][j] = int(digit)
            j += 1
        i += 1
             
    return M


def grid_writing(M, num_grid):
    """Write the matrix M into the grid representation."""
    size = len(M)

    if size != len(M[0]):
        raise TypeError("Matrix width different from height.")

    for i in range(size):

        for j in range(size):

            value = ' ' if  M[i][j] == 3 else str(M[i][j]) 

            grids[num_grid][(i*2)+1][(j*4)+2] = value

    return grids[num_grid]


def clear_colum(num_grid):

    l = 1
    end = grid_size[num_grid]
    while((l-1)//2 <= end):
        
        grids[num_grid][l][i] = ' '   
        l += 2

def clear_line(num_grid):

    c = 2
    end = grid_size[num_grid]
    while((c-2)//4 <= end):
        
        grids[num_grid][j][c] = ' '   
        c += 4
        
def clear_grid(num_grid):
    
    for row in range(1, len(grids[num_grid]) - 1, 2): 
       
        for col_index in range(2, len(grids[num_grid][row]) - 2, 4):  
            grids[num_grid][row][col_index] = ' ' 

def example_set(num_grid):

    os.system('clear')

    grids[num_grid] = grid_writing(solver.G_10x10_EASY,num_grid)

    display_grid(num_grid)

    return

def display_grid(num_grid):
    os.system("clear")

    print(grids[num_grid][j][i])

    grids[num_grid][j][i_next-1] = ' ' 
    grids[num_grid][j][i_next+1] = ' '
    grids[num_grid][j][i_prev-1] = ' '
    grids[num_grid][j][i_prev+1] = ' ' 

    grids[num_grid][j_prev][i-1] = ' ' 
    grids[num_grid][j_prev][i+1] = ' '   
    grids[num_grid][j_next][i-1] = ' ' 
    grids[num_grid][j_next][i+1] = ' '   
    
    grids[num_grid][j][i-1] = '▸' 
    grids[num_grid][j][i+1] = '◂'

    #for row in grids[num_grid]:    
    s = len(grids[num_grid])
    
    for r in range(s):
        
        information = ""
        if s//2 == r+1:
            information = "                        ┌───┐"
        elif s//2 == r:
            information = f"      Current Cellule : │ {grids[num_grid][j][i]} │"
        elif s//2 == r-1:
            information = "                        └───┘"

        print("".join(grids[num_grid][r]) + information)
    
    print("\n  Press 'x' to place '1'                         Press 'e' to set and example\n  Press 'c' to place '0'\n  Press 'v' to delete\n  Press 'b' to clear the line\n  Press 'g' to clear the colum\n  Press 'j' to clear the grid")
    return

def grid_filling(num_grid):

    display_grid(num_grid)

    def arrow_press(key):

        global i
        global i_prev
        global i_next

        global j
        global j_prev
        global j_next

        try:
            if key == Key.left:
                
                i_next = i
                if i != 2:
                    i -= 4
                
            elif key == Key.right:
                
                i_prev = i
                if (i-2)//4 != (grid_size[num_grid]):
                    i += 4

            elif key == Key.up:
                
                j_prev = j
                if j != 1:
                    j -= 2

            elif key == Key.down:

                j_next = j
                if (j-1)//2 != (grid_size[num_grid]):
                    j += 2

            elif key == Key.enter:
                
                os.system('clear')

                #M = grid_reading(num_grid)

                return False

            elif key.char == '1' or key.char == 'x':
                grids[num_grid][j][i] = '1'

            elif key.char == '0' or key.char == 'c':
                grids[num_grid][j][i] = '0'
            
            elif key.char == '2' or key.char == 'v':
                grids[num_grid][j][i] = ' '
            
            elif key.char == 'b':
                clear_line(num_grid)
            
            elif key.char == 'g':
                clear_colum(num_grid)

            elif key.char == 'j':
                clear_grid(num_grid)

            elif key.char == 'e':

                example_set(num_grid)

            display_grid(num_grid)
            
        except AttributeError:
            
            pass
            
    with Listener(on_press = arrow_press) as listener:
        listener.join()

    return num_grid



#user_grid = 